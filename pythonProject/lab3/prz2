from dataclasses import dataclass
from abc import ABC
import aiohttp
from dependency_injector import containers, providers
from datetime import datetime
import asyncio
from typing import Iterable


@dataclass
class AirQualityRecord:
    event_time: datetime
    pm10_value: float

class IAirQualityRepository(ABC):
    async def get_last_air_quality_params(self, sensor_id: int) -> AirQualityRecord | None:
        pass

    async def get_all_air_quality_params(self, sensor_id: int) -> Iterable[AirQualityRecord] | None:
        pass


class AirQualityRepository(IAirQualityRepository):
    async def get_last_air_quality_params(self, sensor_id: int) -> AirQualityRecord | None:
        all_params = await self._get_params(sensor_id)
        parsed_params = await self._parse_params(all_params)

        return parsed_params[0]

    async def get_all_air_quality_params(self, sensor_id: int) -> Iterable[AirQualityRecord] | None:
        all_params = await self._get_params(sensor_id)
        parsed_params = await self._parse_params(all_params)

        return parsed_params

    async def _get_params(self, sensor_id: int) -> Iterable[dict] | None:
        async with aiohttp.ClientSession() as session:
            async with session.get(consts.API_SENSOR_URL.format(sensor_id=sensor_id)) as response:
                if response.status != 200:
                    return None

                return await response.json()

    async def _parse_params(self, params: Iterable[dict]) -> Iterable[AirQualityRecord]:
        return [AirQualityRecord(event_time=record.get("date"), pm10_value=record.get("value")) for record in
                params["values"]]


class IAirQualityService(ABC):
    async def get_air_quality_index(self, sensor_id: int) -> str:
        pass

    async def get_mean_params(self, sensor_id: int) -> float:
        pass


class AirQualityService(IAirQualityService):
    repository: IAirQualityRepository

    def __init__(self, repository: IAirQualityRepository) -> None:
        self.repository = repository

    async def get_air_quality_index(self, sensor_id: int) -> str:
        pm10_current_value = await self.repository.get_last_air_quality_params(sensor_id=sensor_id)
        pm10_index_value = PM10IndexEnum.from_pm10_value(pm10_current_value.pm10_value)

        return pm10_index_value

    async def get_mean_params(self, sensor_id: int) -> float:
        all_quality_params = await self.repository.get_all_air_quality_params(sensor_id=sensor_id)
        mean_air_quality_params = sum([r.pm10_value for r in all_quality_params if r.pm10_value is not None]) / len(
            all_quality_params)

        return mean_air_quality_params

async def main(
        service: IAirQualityService = Provide[Container.service],
) -> None:
    last_pm10_index = await service.get_air_quality_index(consts.SENSOR_ID)
    mean_pm10_value = await service.get_mean_params(consts.SENSOR_ID)

    print(f"Current AQI: {last_pm10_index}, average PM10 value: {mean_pm10_value}")


if __name__ == "__main__":
    container = Container()
    container.wire(modules=[__name__])

    asyncio.run(main())


class Container(containers.DeclarativeContainer):
    config = providers.Configuration()

    repository = providers.Singleton(
        AirQualityRepository,
    )

    service = providers.Factory(
        AirQualityService,
        repository=repository,
    )
